/**********************************************************
 * EECS2011: Fundamentals of Data Structures,  Fall 2014
 * TEST CASES AND OUTPUT
 * Student Name:         Michael Williams
 * Student cse account:  mw1992
 * Student ID number:    211087798
 **********************************************************/

QUESTION 2 (See Question2Visuals file for a visual representation of what the following trees
            look like when implemented)

1)regular random tree made
input:  TreeDiameter<Character> tree = new TreeDiameter<Character>();
		TreeNode<Character> root = tree.addRoot('r');
		TreeNode<Character> a = tree.addLeft(root, 'a');
		TreeNode<Character> b = tree.addRight(root, 'b');
		TreeNode<Character> c = tree.addLeft(a, 'c');
		TreeNode<Character> d = tree.addRight(a, 'd');
		TreeNode<Character> e = tree.addLeft(c, 'e');
		TreeNode<Character> f = tree.addLeft(d, 'f');
		TreeNode<Character> g = tree.addRight(d, 'g');
		TreeNode<Character> h = tree.addLeft(e, 'h');
		TreeNode<Character> i = tree.addLeft(f, 'i');
		TreeNode<Character> j = tree.addRight(g, 'j');
		TreeNode<Character> k = tree.addLeft(i, 'k');
		TreeNode<Character> l = tree.addLeft(k, 'l');
		TreeNode<Character> m = tree.addRight(i, 'm');
		TreeNode<Character> n = tree.addLeft(h, 'n');
		
		int diameter = tree.maxDiameter(tree);
		System.out.println("Max diameter is " + diameter);
		
output: Max diameter is 9

2)maxDiameter in the left subtree
input:  TreeDiameter<Character> tree = new TreeDiameter<Character>();
		TreeNode<Character> root = tree.addRoot('r');
		TreeNode<Character> a = tree.addLeft(root, 'a');
		TreeNode<Character> b = tree.addRight(root, 'b');
		TreeNode<Character> c = tree.addLeft(a, 'c');
		TreeNode<Character> d = tree.addRight(a, 'd');
		TreeNode<Character> e = tree.addLeft(c, 'e');
		TreeNode<Character> f = tree.addRight(c, 'f');
		TreeNode<Character> g = tree.addLeft(d, 'g');
		TreeNode<Character> h = tree.addRight(d, 'h');
		TreeNode<Character> i = tree.addLeft(e, 'i');
		TreeNode<Character> j = tree.addLeft(h, 'j');
		
		int diameter = tree.maxDiameter(tree);
		System.out.println("Max diameter is " + diameter);

output: Max diameter is 6

3)maxDiameter in the right subtree
input:  TreeDiameter<Character> tree = new TreeDiameter<Character>();
		TreeNode<Character> root = tree.addRoot('r');
		TreeNode<Character> a = tree.addRight(root, 'a');
		TreeNode<Character> b = tree.addLeft(a, 'b');
		TreeNode<Character> c = tree.addRight(a, 'c');
		TreeNode<Character> d = tree.addRight(b, 'd');
		TreeNode<Character> e = tree.addRight(c, 'e');
		
		int diameter = tree.maxDiameter(tree);
		System.out.println("Max diameter is " + diameter);
		
output: Max diameter is 4

4)maxDiameter is through the root of the tree
input:  TreeDiameter<Character> tree = new TreeDiameter<Character>();
		TreeNode<Character> root = tree.addRoot('r');
		TreeNode<Character> a = tree.addRight(root, 'a');
		TreeNode<Character> b = tree.addLeft(root, 'b');
		TreeNode<Character> c = tree.addRight(b, 'c');
		TreeNode<Character> d = tree.addRight(b, 'd');
		
		int diameter = tree.maxDiameter(tree);
		System.out.println("Max diameter is " + diameter);
		
output: Max diameter is 3		

5)the tree is empty
input:  TreeDiameter<Character> tree = new TreeDiameter<Character>();
        int diameter = tree.maxDiameter(tree);
		System.out.println("Max diameter is " + diameter);
		
output: Max diameter is 0

6)the tree is comprised of only the root
input:  TreeDiameter<Character> tree = new TreeDiameter<Character>();
		TreeNode<Character> root = tree.addRoot('r');
		
		int diameter = tree.maxDiameter(tree);
		System.out.println("Max diameter is " + diameter);
		
output: Max diameter is 0

7)the tree is properly balanced
input:  TreeDiameter<Character> tree = new TreeDiameter<Character>();
		TreeNode<Character> root = tree.addRoot('r');
		TreeNode<Character> a = tree.addLeft(root, 'a');
		TreeNode<Character> b = tree.addRight(root, 'b');
		TreeNode<Character> c = tree.addLeft(a, 'c');
		TreeNode<Character> d = tree.addRight(a, 'd');
		TreeNode<Character> e = tree.addLeft(b, 'e');
		TreeNode<Character> f = tree.addRight(b, 'f');
		
		int diameter = tree.maxDiameter(tree);
		System.out.println("Max diameter is " + diameter);
		
output: Max diameter is 4								


	


QUESTION 4

1)just 3 regular integers used
input:  a.insert(7);
		a.insert(18);
		a.insert(3);
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);

output: 7
        7
       [3]
       [18]

2)a single input used  
input:  a.insert(1);
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);
		
output: 1
        1
        []
        []		

3)no input used        
input:  no values added to heap

        System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);
		
output: null
        null
        []
        []

4)even number of positive integers
input:  a.insert(2);
		a.insert(12);
		a.insert(15);
		a.insert(7);
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);
		
output: 7
        7
        [2]
        [12, 15]		


5)even number of negative integers
input:  a.insert(-3);
		a.insert(-1);
		a.insert(-5);
		a.insert(-7);
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);
		
output: -5
        -5
        [-7]
        [-3, -1]		

           
6)odd number of inputs, containing negative and positive integers        
input:  a.insert(-22);
		a.insert(12);
		a.insert(15);
		a.insert(-4);
		a.insert(81);
		a.insert(12);
		a.insert(-6);
		a.insert(-4);
		a.insert(12);
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);

output: -4
        -4
        [12, -4, -22, -6]
        [12, 12, 81, 15]

7)even number of inputs, containing negative and positive integers
input:  a.insert(-2);
		a.insert(12);
		a.insert(15);
		a.insert(-7);
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);
		
output: -2
        -2
        [-7]
        [12, 15]	



8)example from assignment
input:	a.insert(4);
		a.insert(9);
		a.insert(1);;
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);

output: 4
        4
       [1]
       [9]
       
9)example from assignment
input:  a.insert(17);
		a.insert(-4);
		a.insert(13);
		a.insert(-7);
		a.insert(-13);
		a.insert(15);
		a.insert(5);
		a.insert(2);
		
		System.out.println(a.getMedian());
		System.out.println(a.removeMed());
		System.out.println(a.maxHeap);
		System.out.println(a.minHeap);
		
output: 2
        2
        [-4, -7, -13]
        [5, 13, 15, 17]		       			